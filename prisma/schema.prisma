// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model SignMessageHistory {
  id          Int      @id @default(autoincrement())
  passAccount PassWallet @relation(fields: [passAccountId], references: [id])
  passAccountId Int
  signer      String   // Address of the signer
  domainUrl   String   // URL of the dapp requesting signature
  message     String   // Message being signed
  signature   String   // The resulting signature
  sessionId   String?  // WalletConnect session ID
  createdAt   DateTime @default(now())
}

model PassWallet {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  name      String
  owner     String   // General Signable Message Admin
  createdAt DateTime @default(now())
  signedMessages SignMessageHistory[]
  signDomainPermissions SignDomainPermission[]
  assets    Asset[]
  inboxTransactions InboxTransaction[]
}

model SignDomainPermission {
  id        Int      @id @default(autoincrement())
  domainUrl String   // URL of the dapp requesting signature
  passAccount PassWallet @relation(fields: [passAccountId], references: [id])
  passAccountId Int
  allowedSigner String   // Address of the signer
  updatedAt DateTime @updatedAt

  @@unique([passAccountId, domainUrl, allowedSigner])
}

model Asset { // TODO: Redesign
  id        Int      @id @default(autoincrement())
  symbol    String
  name      String
  balance   String   // Store as string to handle big numbers
  decimals  Int      @default(18)
  contractAddress String?
  wallet    PassWallet @relation(fields: [walletId], references: [id])
  walletId  Int
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([walletId, symbol])
}


model InboxTransaction {
  id               Int         @id @default(autoincrement())
  wallet           PassWallet  @relation(fields: [walletId], references: [id])
  walletId         Int

  transactionHash  String      @unique
  blockNumber      String
  tokenType        TokenType
  contractAddress  String?     // For ERC20/721/1155
  tokenId          String?     // For NFTs
  amount           String
  fromAddress      String
  toAddress        String

  symbol           String
  name             String
  decimals         Int         @default(18)

  claimed          Boolean     @default(false)
  claimedAt        DateTime?

  createdAt        DateTime    @default(now())
}

enum TokenType {
  ETH
  ERC20
  ERC721
  ERC1155
}